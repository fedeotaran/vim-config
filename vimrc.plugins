if &compatible
 set nocompatible
end

filetype off
call plug#begin('~/.vim/plugged')

" -------- Apparence ----------
"  ## Colors schema
Plug 'jacoborus/tender'
Plug 'morhetz/gruvbox'
Plug 'drewtempelmeyer/palenight.vim'
"  ## Status Line
Plug 'itchyny/lightline.vim'

" -------- Project ----------
Plug 'tpope/vim-vinegar'     " Split window with project drawer

" ----- Fuzzy Search ------
Plug '$(which fzf)'
Plug 'junegunn/fzf.vim'                                           " Vim integrtion

" -------- Git ----------
Plug 'tpope/vim-fugitive'     " Git wrapper
Plug 'tpope/vim-git'          " One command is provided to show a diff of the current commit
Plug 'airblade/vim-gitgutter' " Shows whether each line has been added, modified, and where lines have been removed

" ------- Lenguages ----------
" ## Elixir
Plug 'elixir-lang/vim-elixir'

" ------- Snippets ----------
Plug 'SirVer/ultisnips'   " Solution for snippets in Vim
Plug 'honza/vim-snippets' " Contains snippets files for various programming languages

" -------- Others ----------
Plug 'mattn/emmet-vim'         " Provides support for expanding abbreviations similar to Emmet
Plug 'bogado/file-line'        " Opening a file in a given line
Plug 'tpope/vim-repeat'        " Remaps '.' in a way that plugins can tap into it
Plug 'tpope/vim-surround'      " Provides mappings to easily delete, change and add such surroundings in pairs
Plug 'junegunn/vim-easy-align' " Alignament your code

" ---------- Sources local bundles ----------
if filereadable(expand("~/.vimrc.plugins.local"))
  source ~/.vimrc.plugins.local
endif

call plug#end()

filetype on
